import React, {useMemo} from 'react'

import {yupResolver} from '@hookform/resolvers/yup'
import {format} from 'date-fns'
import {FormProvider, useForm} from 'react-hook-form'
import * as yup from 'yup'

import {PersonalEdit} from 'src/components/PersonalEdit'
import {useTypedNavigation} from 'src/hooks'
import {vibration} from 'src/services/vibration'
import {selectProfile, useTypedDispatch, useTypedSelector} from 'src/store'
import {updateUserData} from 'src/store/profileSlice'

const personalEditSchema = yup
  .object({
    email: yup.string().trim().email('–≠—Ç–æ –ø–æ–ª–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å email –∞–¥—Ä–µ—Å'),
    firstName: yup
      .string()
      .required('–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')
      .min(2, '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è')
      .max(35, '–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ')
      .trim(),
    lastName: yup
      .string()
      .required('–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')
      .min(2, '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ–∞–º–∏–ª–∏—è')
      .max(35, '–§–∞–º–∏–ª–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è')
      .trim(),
    birthday: yup
      .date()
      .max(new Date(), '–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º')
      .optional(),
  })
  .required()

type PersonalEditType = yup.InferType<typeof personalEditSchema>

export const PersonalEditScreen = () => {
  const {goBack} = useTypedNavigation()
  const dispatch = useTypedDispatch()

  const {email, firstName, lastName, birthday} = useTypedSelector(selectProfile)

  const isValidDob = !isNaN(Date.parse(birthday ?? ''))

  const form = useForm<PersonalEditType>({
    mode: 'onChange',
    resolver: yupResolver(personalEditSchema),
    defaultValues: {
      email,
      birthday: birthday && isValidDob ? new Date(birthday) : undefined,
      firstName,
      lastName,
    },
  })

  const onSubmit = useMemo(
    () =>
      form.handleSubmit(
        async ({birthday: dob, ...data}: PersonalEditType) => {
          let formattedDate: string | undefined
          if (dob) {
            formattedDate = format(dob, 'yyyy-MM-dd')
          }

          await dispatch(updateUserData({...data, birthday: formattedDate}))
          vibration.success()
          goBack()
        },
        (error: any) => {
          vibration.error()
          console.log('üò≠ - error:', error)
        },
      ),
    [],
  )

  return (
    <FormProvider {...form}>
      <PersonalEdit onSubmit={onSubmit} />
    </FormProvider>
  )
}
