import React, {memo} from 'react'

import {yupResolver} from '@hookform/resolvers/yup'
import {FormProvider, useForm} from 'react-hook-form'
import {StyleSheet} from 'react-native'
import Animated, {FadeIn, FadeOut} from 'react-native-reanimated'
import * as yup from 'yup'

import {vibration} from 'src/services/vibration'
import {Color} from 'src/themes'

import {Button, FormTextInput, Spacer, Text} from 'ui/index'

const registrySchema = yup
  .object({
    firstName: yup
      .string()
      .required('–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')
      .min(2, '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è')
      .max(35, '–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ')
      .trim()
      .matches(/^\S*$/, '–ü—Ä–æ–±–µ–ª—ã –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –≤ –∏–º–µ–Ω–∏'),
    lastName: yup
      .string()
      .required('–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')
      .min(2, '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ–∞–º–∏–ª–∏—è')
      .max(35, '–§–∞–º–∏–ª–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è')
      .trim()
      .matches(/^\S*$/, '–ü—Ä–æ–±–µ–ª—ã –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –≤ —Ñ–∞–º–∏–ª–∏–∏'),
    phoneNumber: yup.string().trim().required('–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ').trim(),
  })
  .required()
export type RegistryFormType = yup.InferType<typeof registrySchema>

interface RegistryFormProps {
  requestError?: string
  onSubmit?: (formData: RegistryFormType) => void
  isLoading?: boolean
}

export const RegistryForm = memo(
  ({onSubmit, isLoading, requestError}: RegistryFormProps) => {
    const form = useForm<RegistryFormType>({
      resolver: yupResolver(registrySchema),
    })

    const onSubmitForm = async (data: RegistryFormType) => {
      onSubmit?.(data)
    }
    const onInvalid = async (e: any) => {
      vibration.error()
      console.log('üò≠ - error:', e)
    }

    return (
      <Animated.View
        entering={FadeIn}
        exiting={FadeOut}
        style={[styles.formContainer]}>
        <FormProvider {...form}>
          <FormTextInput
            placeholder="–ò–º—è"
            name="firstName"
            nextField="lastName"
          />
          <Spacer height={16} />
          <FormTextInput
            placeholder="–§–∞–º–∏–ª–∏—è"
            name="lastName"
            nextField="phoneNumber"
          />
          <Spacer height={16} />
          <FormTextInput
            keyboardType="phone-pad"
            name="phoneNumber"
            placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
          />
          <Spacer height={16} />
          <Button
            gp5
            isLoading={isLoading}
            fullWidth
            onPress={form.handleSubmit(onSubmitForm, onInvalid)}>
            –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω
          </Button>
          <Spacer height={8} />
          {requestError && (
            <Text gp1 center style={styles.errorText} color={Color.textRed1}>
              {requestError}
            </Text>
          )}
        </FormProvider>
      </Animated.View>
    )
  },
)

const styles = StyleSheet.create({
  formContainer: {
    borderWidth: 1,
    maxWidth: 600,
    width: '100%',
    borderColor: Color.primaryBlack,
    borderRadius: 8,
    paddingHorizontal: 10,
    paddingVertical: 16,
  },
  errorText: {
    width: '100%',
    marginHorizontal: 10,
    marginTop: 6,
    lineHeight: 14,
    flexWrap: 'wrap',
  },
})
